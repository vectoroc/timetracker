<?php

include_once('timetracker_invoice.features.inc');

/**
 * Implementation of hook_init(). 
 */
function timetracker_invoice_init() {
  if ($_GET['q'] == 'node/add/timetracker-invoice') {
    drupal_goto('timetracker/create-invoice');
  }
}

/**
 * Implementation of hook_perm(). 
 */
function timetracker_invoice_perm() {
  return array('view any timetracker invoice');
}

/**
 * Implementation of hook_nodeapi().
 */
function timetracker_invoice_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if ($node->type != 'timetracker_invoice') return;

  switch ($op) {
    case 'validate':
      // ensure that tids have not been assigned to invoice
      if (is_array($node->timetracker) && count($node->timetracker)) { 
        $query = 'SELECT COUNT(tid) FROM {timetracker} WHERE invoice_nid > 0'
               . ' AND tid in ('. db_placeholders($node->timetracker) .')';
               
        $args = $node->timetracker;
        
        if ($node->nid) {
          $query .= ' AND invoice_nid <> %d';
          $args[] = $node->nid;
        }
           
        if (db_result(db_query($query, $args))) {
          form_set_error(NUL, t('Some timetracker entries has already been invoiced'));
        }
      }
      else {
        form_set_error(NUL, t('Not assigned timetracker etnries'));
      }
      break;

    case 'load':
      $res = db_query('SELECT tid FROM {timetracker} WHERE invoice_nid = %d', $node->nid);
      $data = array();
      while($tid = db_result($res)) {
        $data['timetracker'][$tid] = $tid;
      }
      return $data;
      break;
      
    case 'delete':
      db_query('UPDATE {timetracker} SET invoice_nid = 0 WHERE invoice_nid = %d', $node->nid);
      break;

    case 'save':
      timetracker_invoice_nodeapi($node, 'delete');
    case 'insert':
      if (is_array($node->timetracker) && count($node->timetracker)) {
        $query = 'UPDATE {timetracker} SET invoice_nid = %d WHERE tid in ('. db_placeholders($node->timetracker) .')';
        db_query($query, array_merge(array($node->nid), $node->timetracker));
      }
      break;
      
    case 'view':
      if ($node->uid == $user->uid || user_access('view any timetracker invoice')) {
        $node->content['timetracker_invoice'] = array(
          '#value' => views_embed_view('timetracker_invoice'),
        );
      }
      break;
  }
}


function timetracker_invoice_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
//  dpm(compact('form', 'form_state', 'form_id'));
    // Add elements to the node form
    $node = $form['#node'];
    if ($form['type']['#value'] == 'timetracker_invoice') {
      $form['timetracker'] = array(
        '#type' => 'value',
        '#default_value' => $node->timetracker,
      );
    }
  }
}

/**
 * Implementation of hook_views_data_alter().
 */
function timetracker_invoice_views_data_alter(&$data) {
  $data['timetracker']['table']['join']['invoice'] = array(
    'table' => 'node',
    'left_field' => 'nid',
    'field' => 'nid',
  );
  
  $data['timetracker']['invoice_nid'] = array(
    'title' => t('Invoice Node'),
    'help' => t('The invoice node related to the time entry.'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('Invoice'),
    ),
  );
}

function timetracker_views_bulk_operations_object_info() {
  $object_info = array(
    'timetracker' => array(
      'type' => 'timetracker',
      'base_table' => 'timetracker',
      'load' => '_views_bulk_operations_timetracker_load',
//      'normalize' => '_views_bulk_operations_normalize_node_context',
//      'hook' => 'taxonomy',
//      'access' => 'node_access',
      'oid' => 'tid',
      'title' => 'note',
    ),
    
  );
  
  return $object_info;
}

function _views_bulk_operations_timetracker_load($tid) {
  return db_fetch_object(db_query('SELECT * FROM {timetracker} WHERE tid = %d', $tid));  
}

/**
 * Implementation oh hook_timetracker_operations(). 
 */
function timetracker_invoice_timetracker_operations() {
  $operations['create_invoice'] = array(
    'label' => t('Create an invoice'),
    'callback' => 'timetracker_invoice_create_action',
  );

//  if (empty($operation['callback'])) continue;
//        $key = $operation['callback'] . (empty($operation['callback arguments']) ? '' : ':'. md5(serialize($operation['callback arguments'])));
//        if (!isset($operation['behavior'])) { // assume operations modify nodes by default
//          $operation['behavior'] = array('changes_node_property');
//        }
//        $operations[$key] = array(
//          'key'                 => $key,
//          'label'               => $operation['label'],
//          'callback'            => $operation['callback'],
//          'callback arguments'  => isset($operation['callback arguments']) ? $operation['callback arguments'] : array(),
//          'configurable'        => isset($operation['configurable']) ? $operation['configurable'] : FALSE,
//          'form properties'     => isset($operation['form properties']) ? $operation['form properties'] : array(),
//          'source'              => 'operation',
//          'type'                => $object_type,
//          'aggregate'           => isset($operation['aggregate']) ? (int)$operation['aggregate'] : VBO_AGGREGATE_OPTIONAL,
//          'access op'           => $this->get_access_op($operation),
//          'permissions'         => isset($operation['permissions']) ? $operation['permissions'] : NULL,
//          'hooks'               => array(),
//        );  
  return $operations;
}

function timetracker_invoice_create_action($tids, $context) {
  global $user;
  
  $form_state = array();
  module_load_include('inc', 'node', 'node.pages');
  
//  $group = (object) og_get_group_context();  
  $node = array(
    'type' => 'timetracker_invoice',
//    'og_groups' => array(),
  );
  
  $form_state['values']['type'] = 'timetracker_invoice';
  $form_state['values']['status'] = 1; 
  $form_state['values']['title'] = _timetracker_invoice_format_title($user, $tids);   
  $form_state['values']['op'] = t('Save');  
  $form_state['values']['name'] = $user->name;
  $form_state['values']['timetracker'] = $tids;
  // subscribe the author to notifications
  $form_state['values']['notifications_team']['selected'] = $user->uid;
  $form_state['values']['notifications_content_disable'] = 1;
  
  drupal_execute('timetracker_invoice_node_form', $form_state, (object) $node);
  dpm($form_state);
}

/**
 * Implementation of hook_context_default_contexts_alter().
 */
function timetracker_invoice_context_default_contexts_alter(&$contexts) {
  if (module_exists('timetracker_feature') && !empty($contexts['timetracker_listing'])) {
    $contexts['timetracker_listing']->conditions['node'] = array(
      'values' => array('timetracker_invoice' => 'timetracker_invoice'),
      'options' => array('node_form' => 1),
    );
    
    $contexts['timetracker_listing']->conditions['views']['values'] += array(
      'timetracker_invoice:page_4' => 'timetracker_invoice:page_4',
      'timetracker_invoice_listing:page_1' => 'timetracker_invoice_listing:page_1',
    );
    
    $contexts['timetracker_listing']->reactions['block']['blocks']['timetracker_invoice-filters'] = array(
      'module' => 'timetracker_invoice', 
      'delta' => 'filters',
      'region' => 'right', 
      'weight' => 0,
    );
  }
}

/**
 * Implementation of hook_block().
 */
function timetracker_invoice_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks['filters'] = array('info' => t('Timetracker Invoice filter'));
      return $blocks;
    case 'view':
      $function = '_timetracker_invoice_block_'. $delta;
      if (function_exists($function)) {
        return call_user_func($function);
      }
      break;
  }
}

/**
 * Preprocessor for theme('views_view').
 */
function timetracker_invoice_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if ($view->name == 'timetracker_invoice_listing' || $view->name == 'timetracker_invoice') {
    // Whisk away exposed filter for display in a block
    _timetracker_invoice_block_filters($vars['exposed']);
    $vars['exposed'] = '';
  }
}

/**
 * Filter block.
 */
function _timetracker_invoice_block_filters($set = '') {
  static $filters;
  if (!empty($set)) {
    $filters = $set;
    return;
  }
  if (!empty($filters)) {
    return array('subject' => t('Filter results'), 'content' => $filters);
  }
  return array();
}

function _timetracker_invoice_get_date_range($tids) {
  $query = 'SELECT MIN(timestamp) as `min`, MAX(timestamp) as `max` FROM {timetracker} WHERE tid in ('. db_placeholders($tids) .')';
  $bounds = db_fetch_object(db_query($query, $tids));
  
  $lo_date = format_date($bounds->min, 'small');
  $hi_date = format_date($bounds->max, 'small');
  if ($bounds->min == $bounds->max) {
    return $lo_date;
  }
  else {
    return $lo_date.' - '.$hi_date;
  }
}

function _timetracker_invoice_format_title($account, $tids) {
  $date_range = _timetracker_invoice_get_date_range($tids);
  $title = t('Invoice from !user_name (!date_range)', array(
    '!user_name' => $account->name, 
    '!date_range' => $date_range,
  ));
  
  $count = db_result(db_query('SELECT COUNT(title) FROM {node} WHERE title LIKE "%s%%"', $title));
  if ($count) {
    $title .= ' #'. ($count + 1);
  }
  
  return $title;
}